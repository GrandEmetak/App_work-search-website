INFO for Users

---------------------
/**
 * Предположим, что на страницу posts.do может переходить только авторизованный пользователь.
 * Тогда в нашем приложении дырка в безопасности.Чтобы её устранить мы будем фильтровать все запросы.
 * Если запрос не связан с пользователем, то будем перенаправлять такой запрос на страницу авторизации.
 * Чтобы этого добиться в Java используется javax.servlet.Filter интерфейс.
 * <p>
 * Фильтр должен выполнять задачи для одной группы пользователей.
 * Все запросы с расширением *.do будут обрабатываться нашим фильтром.
 * <p>
 * В AuthFilter добавьте игнорировние сервлета reg.do.
 * <p>
 * IMPORTANT! - добавлена аннотация @WebFilter вместо прописывания его в web.xml
 * <filter>
 * <filter-name>AuthFilter</filter-name>
 * <filter-class>.....filter.AuthFilter</filter-class>
 * </filter>
 * <p>
 * <filter-mapping>
 * <filter-name>AuthFilter</filter-name>
 * <url-pattern>*.do</url-pattern>В url-pattern можно указать полный путь или маску поиска.
 * </filter-mapping>
 * полный путь или маску поиска * - все запросы.
 * Здесь используется маска *.do. *.do - это дань старому фреймворку Struts.
 */
class AuthFilter implements Filter {

  /**
     * Интерфейс Filter содержит метод doFilter. Через этот метод будут проходить запросы к сервлетам.
     * Если запрос идет на сервлет авторизации, то проверка делаться не будет.
     * if (uri.endsWith("auth.do")) {
     * chain.doFilter(sreq, sresp);
     * return; }
     * Для всех остальных запросов мы проверяем текущего пользователя. Если его нет,
     * то отправляем на страницу авторизации.
     * if (req.getSession().getAttribute("user") == null) {
     * resp.sendRedirect(req.getContextPath() + "/login.jsp");
     * return;
     * }
     *
     * @param sreq
     * @param sresp
     * @param chain
     * @throws IOException
     * @throws ServletException
     */
void doFilter()
}